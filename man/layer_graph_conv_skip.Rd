% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers_conv.R
\name{layer_graph_conv_skip}
\alias{layer_graph_conv_skip}
\title{GraphConvSkip}
\usage{
layer_graph_conv_skip(
  object,
  channels,
  activation = NULL,
  use_bias = TRUE,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{channels}{number of output channels}

\item{activation}{activation function to use}

\item{use_bias}{bool, add a bias vector to the output}

\item{kernel_initializer}{initializer for the weights}

\item{bias_initializer}{initializer for the bias vector}

\item{kernel_regularizer}{regularization applied to the weights}

\item{bias_regularizer}{regularization applied to the bias vector}

\item{activity_regularizer}{regularization applied to the output}

\item{kernel_constraint}{constraint applied to the weights}

\item{bias_constraint}{constraint applied to the bias vector.}
}
\description{
\loadmathjax
A simple convolutional layer with a skip connection.

\strong{Mode}: single, disjoint, mixed, batch.

This layer computes:
\mjdeqn{ Z = D^{-1/2} A D^{-1/2} X W_1 + X W_2 + b }{}
where \mjeqn{ A }{} does not have self-loops (unlike in GraphConv).

\strong{Input}
\itemize{
\item Node features of shape \verb{([batch], N, F)};
\item Normalized adjacency matrix of shape \verb{([batch], N, N)}; can be computed
with \code{spektral.utils.convolution.normalized_adjacency}.
}

\strong{Output}
\itemize{
\item Node features with the same shape as the input, but with the last
dimension changed to \code{channels}.
}
}
