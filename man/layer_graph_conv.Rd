% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_graph_conv}
\alias{layer_graph_conv}
\title{A graph convolutional layer (GCN)}
\usage{
layer_graph_conv(
  object,
  channels,
  activation = None,
  use_bias = True,
  kernel_initializer = "glorot_uniform",
  bias_initializer = "zeros",
  kernel_regularizer = NULL,
  bias_regularizer = NULL,
  activity_regularizer = NULL,
  kernel_constraint = NULL,
  bias_constraint = NULL,
  ...
)
}
\arguments{
\item{object}{model or layer object;}

\item{channels}{number of output channels;}

\item{activation}{activation function to use;}

\item{use_bias}{bool, add a bias vector to the output;}

\item{kernel_initializer}{initializer for the weights;}

\item{bias_initializer}{initializer for the bias vector;}

\item{kernel_regularizer}{regularization applied to the weights;}

\item{bias_regularizer}{regularization applied to the bias vector;}

\item{activity_regularizer}{regularization applied to the output;}

\item{kernel_constraint}{constraint applied to the weights;}

\item{bias_constraint}{constraint applied to the bias vector.}
}
\description{
A graph convolutional layer (GCN) as presented by
\href{https://arxiv.org/abs/1609.02907}{Kipf & Welling (2016)}. \cr
\strong{Mode}: single, disjoint, mixed, batch. This layer computes:
\deqn{\Z = \hat \D^{-1/2} \hat \A \hat \D^{-1/2} \X \W + \b}{Z =
D_hat^(-1/2)*A_hat*D_hat^(-1/2)*XW + b}
where \eqn{\( \hat \A = \A + \I \)}{A_hat = A + I} is the adjacency
matrix with added self-loops and \eqn{\(\hat\D\)}{D_hat} is its degree matrix. \cr \cr
\strong{Input} \cr
A list of: \cr
\itemize{
\item Node features of shape \verb{([batch], N, F)};
\item Modified Laplacian of shape \verb{([batch], N, N)}; can be computed with
\code{spektral.utils.convolution.localpooling_filter}. \cr \cr
\strong{Output} \cr
\item Node features with the same shape as the input, but with the last
dimension changed to \code{channels}.
}
}
\details{
See the online documentation for \href{https://graphneural.network/layers/convolution/#graphconv}{Spektral (python package)}
for more details.
}
\author{
Daniele Grattarola (python code); Russell Dinnage (R wrapper)
}
