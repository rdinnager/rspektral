% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers_conv.R
\name{layer_agnn_conv}
\alias{layer_agnn_conv}
\title{AGNNConv}
\usage{
layer_agnn_conv(object, trainable = TRUE, activation = NULL, ...)
}
\arguments{
\item{trainable}{boolean, if True, then beta is a trainable parameter.
Otherwise, beta is fixed to 1}

\item{activation}{activation function to use}
}
\description{
\loadmathjax
An Attention-based Graph Neural Network (AGNN) as presented by
\href{https://arxiv.org/abs/1803.03735}{Thekumparampil et al. (2018)}.

\strong{Mode}: single, disjoint.

\strong{This layer expects a sparse adjacency matrix.}

This layer computes:
\mjdeqn{ Z = PX }{}
where
\mjdeqn{ P_{ij} = \frac{ \exp \left( \beta \cos \left( X_i, X_j \right) \right) }{ \sum\limits_{k \in \mathcal{N}(i) \cup \{ i \}} \exp \left( \beta \cos \left( X_i, X_k \right) \right) } }{}
and \mjeqn{\beta}{} is a trainable parameter.

\strong{Input}
\itemize{
\item Node features of shape \verb{(N, F)};
\item Binary adjacency matrix of shape \verb{(N, N)}.
}

\strong{Output}
\itemize{
\item Node features with the same shape of the input.
}
}
